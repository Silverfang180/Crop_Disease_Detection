import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
import os
import base64
import json
import gtts

# Import disease summaries from separate file
from disease_summaries import disease_summaries

# Set page configuration
st.set_page_config(
    page_title="Plant Disease Detection",
    page_icon="ЁЯМ┐",
    layout="wide"
)

# Available languages dictionary
languages = {
    "English": {
        "title": "ЁЯМ┐ Plant Disease Detection",
        "description": "Upload a leaf image to predict the disease.",
        "upload_prompt": "Choose an image...",
        "uploaded_caption": "Uploaded Image",
        "prediction_text": "ЁЯМ▒ Prediction:",
        "language_selector": "Select Language",
        "confidence": "Confidence",
        "no_model": "Model not found. Please check the model path.",
        "play_voice": "Play Voice Summary",
        "disease_summary": "Disease Summary"
    },
    "Hindi (рд╣рд┐рдиреНрджреА)": {
        "title": "ЁЯМ┐ рдкреМрдзреЗ рдХреА рдмреАрдорд╛рд░реА рдХреА рдкрд╣рдЪрд╛рди",
        "description": "рдмреАрдорд╛рд░реА рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдкрддреНрддреА рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
        "upload_prompt": "рдПрдХ рдЫрд╡рд┐ рдЪреБрдиреЗрдВ...",
        "uploaded_caption": "рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдЫрд╡рд┐",
        "prediction_text": "ЁЯМ▒ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди:",
        "language_selector": "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "confidence": "рд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реНрддрд░",
        "no_model": "рдореЙрдбрд▓ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдореЙрдбрд▓ рдкрде рдЬрд╛рдВрдЪреЗрдВред",
        "play_voice": "рд╡реЙрдпрд╕ рд╕рд╛рд░рд╛рдВрд╢ рд╕реБрдиреЗрдВ",
        "disease_summary": "рд░реЛрдЧ рд╕рд╛рд░рд╛рдВрд╢"
    },
    # Other languages preserved here...
    "Tamil (родрооро┐ро┤рпН)": {
        "title": "ЁЯМ┐ роЪрпЖроЯро┐ропро┐ройрпН роирпЛропро▒ро┐родро▓рпН",
        "description": "роирпЛропрпИ роХрогро┐роХрпНроХ роТро░рпБ роЗро▓рпИрокрпНрокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН.",
        "upload_prompt": "рокроЯродрпНродрпИ родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН...",
        "uploaded_caption": "рокродро┐ро╡рпЗро▒рпНро▒рокрпНрокроЯрпНроЯ рокроЯроорпН",
        "prediction_text": "ЁЯМ▒ роХрогро┐рокрпНрокрпБ:",
        "language_selector": "роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "confidence": "роироорпНрокро┐роХрпНроХрпИ",
        "no_model": "рооро╛родро┐ро░ро┐ роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. рокро╛родрпИропрпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН.",
        "play_voice": "роХрпБро░ро▓рпН роЪрпБро░рпБроХрпНроХроорпН роЗропроХрпНроХрпБ",
        "disease_summary": "роирпЛропрпН роЪрпБро░рпБроХрпНроХроорпН"
    },
       "Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)": {
        "title": "ЁЯМ┐ р░ор▒Кр░Хр▒Нр░Хр░▓ р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
        "description": "р░░р▒Лр░Чр░╛р░ир▒Нр░ир░┐ р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░Жр░Хр▒Бр░кр▒И р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐.",
        "upload_prompt": "р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐...",
        "uploaded_caption": "р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░╕р░┐р░и р░Ър░┐р░др▒Нр░░р░В",
        "prediction_text": "ЁЯМ▒ р░Ер░Вр░Ър░ир░╛:",
        "language_selector": "р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "confidence": "р░ир░ор▒Нр░ор░Хр░В",
        "no_model": "р░ор▒Лр░бр░▓р▒Н р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░ор▒Лр░бр░▓р▒Н р░ор░╛р░░р▒Нр░Чр░╛р░ир▒Нр░ир░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐.",
        "play_voice": "р░зр▒Нр░╡р░ир░┐ р░╕р░╛р░░р░╛р░Вр░╢р░╛р░ир▒Нр░ир░┐ р░╡р░┐р░ир░Вр░бр░┐",
        "disease_summary": "р░╡р▒Нр░пр░╛р░зр░┐ р░╕р░╛р░░р░╛р░Вр░╢р░В"
    },
    "Kannada (р▓Хр▓ир│Нр▓ир▓б)": {
        "title": "ЁЯМ┐ р▓╕р▓╕р│Нр▓п р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж",
        "description": "р▓░р│Лр▓Чр▓╡р▓ир│Нр▓ир│Б р▓Кр▓╣р▓┐р▓╕р▓▓р│Б р▓Ор▓▓р│Ж р▓Ър▓┐р▓др│Нр▓░р▓ж р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐.",
        "upload_prompt": "р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐...",
        "uploaded_caption": "р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐р▓ж р▓Ър▓┐р▓др│Нр▓░",
        "prediction_text": "ЁЯМ▒ р▓Кр▓╣р│Ж:",
        "language_selector": "р▓нр▓╛р▓╖р│Ж р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐",
        "confidence": "р▓Жр▓др│Нр▓ор▓╡р▓┐р▓╢р│Нр▓╡р▓╛р▓╕",
        "no_model": "р▓ор▓╛р▓жр▓░р▓┐ р▓Хр▓Вр▓бр│Бр▓мр▓Вр▓жр▓┐р▓▓р│Нр▓▓. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓╛р▓░р│Нр▓Ч р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐.",
        "play_voice": "р▓зр│Нр▓╡р▓ир▓┐ р▓╕р▓╛р▓░р▓╛р▓Вр▓╢р▓╡р▓ир│Нр▓ир│Б р▓Жр▓бр▓┐",
        "disease_summary": "р▓░р│Лр▓Ч р▓╕р▓╛р▓░р▓╛р▓Вр▓╢"
    },
    "Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)": {
        "title": "ЁЯМ┐ р┤Ър╡Жр┤Яр┤┐р┤Хр┤│р╡Бр┤Яр╡Ж р┤░р╡Лр┤Чр┤В р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
        "description": "р┤░р╡Лр┤Чр┤В р┤Хр┤гр┤Хр╡Нр┤Хр┤╛р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Зр┤▓р┤пр╡Бр┤Яр╡Ж р┤Ър┤┐р┤др╡Нр┤░р┤В р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х.",
        "upload_prompt": "р┤Тр┤░р╡Б р┤Ър┤┐р┤др╡Нр┤░р┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х...",
        "uploaded_caption": "р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤д р┤Ър┤┐р┤др╡Нр┤░р┤В",
        "prediction_text": "ЁЯМ▒ р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В:",
        "language_selector": "р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        "confidence": "р┤╡р┤┐р┤╢р╡Нр┤╡р┤╛р┤╕р┤В",
        "no_model": "р┤ор╡Лр┤бр╡╜ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤╛р┤ир┤╛р┤пр┤┐р┤▓р╡Нр┤▓. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤кр┤╛р┤д р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "play_voice": "р┤╢р┤мр╡Нр┤ж р┤╕р┤╛р┤░р┤╛р┤Вр┤╢р┤В р┤кр╡Нр┤▓р╡З р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
        "disease_summary": "р┤░р╡Лр┤Чр┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤╕р┤╛р┤░р┤╛р┤Вр┤╢р┤В"
    },
    "Bengali (ржмрж╛ржВрж▓рж╛)": {
        "title": "ЁЯМ┐ ржЙржжрзНржнрж┐ржжрзЗрж░ рж░рзЛржЧ рж╕ржирж╛ржХрзНрждржХрж░ржг",
        "description": "рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ ржХрж░рждрзЗ ржПржХржЯрж┐ ржкрж╛рждрж╛рж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржиред",
        "upload_prompt": "ржПржХржЯрж┐ ржЫржмрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи...",
        "uploaded_caption": "ржЖржкрж▓рзЛржбржХрзГржд ржЫржмрж┐",
        "prediction_text": "ЁЯМ▒ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕:",
        "language_selector": "ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        "confidence": "ржЖрж╕рзНржерж╛",
        "no_model": "ржоржбрзЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржжржпрж╝рж╛ ржХрж░рзЗ ржоржбрзЗрж▓ ржкрже ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред",
        "play_voice": "ржнржпрж╝рзЗрж╕ рж╕рж╛рж░рж╛ржВрж╢ ржЪрж╛рж▓рж╛ржи",
        "disease_summary": "рж░рзЛржЧрзЗрж░ рж╕рж╛рж░рж╛ржВрж╢"
    },
    "Marathi (рдорд░рд╛рдареА)": {
        "title": "ЁЯМ┐ рд╡рдирд╕реНрдкрддреА рд░реЛрдЧ рдУрд│рдЦ",
        "description": "рд░реЛрдЧ рдУрд│рдЦрдгреНрдпрд╛рд╕рд╛рдареА рдкрд╛рдирд╛рдЪрд╛ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛.",
        "upload_prompt": "рдлреЛрдЯреЛ рдирд┐рд╡рдбрд╛...",
        "uploaded_caption": "рдЕрдкрд▓реЛрдб рдХреЗрд▓реЗрд▓рд╛ рдлреЛрдЯреЛ",
        "prediction_text": "ЁЯМ▒ рдЕрдВрджрд╛рдЬ:",
        "language_selector": "рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛",
        "confidence": "рд╡рд┐рд╢реНрд╡рд╛рд╕",
        "no_model": "рдореЙрдбреЗрд▓ рд╕рд╛рдкрдбрд▓реЗ рдирд╛рд╣реА. рдХреГрдкрдпрд╛ рдкрде рддрдкрд╛рд╕рд╛.",
        "play_voice": "рд╡реНрд╣реЙрдЗрд╕ рд╕рд╛рд░рд╛рдВрд╢ рдкреНрд▓реЗ рдХрд░рд╛",
        "disease_summary": "рд░реЛрдЧрд╛рдЪрд╛ рд╕рд╛рд░рд╛рдВрд╢"
    },
    "Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)": {
        "title": "ЁЯМ┐ ркЫрлЛркбркирлА ркмрлАркорк╛рк░рлА ркУрк│ркЦ",
        "description": "ркмрлАркорк╛рк░рлАркирлЛ ркЕркВркжрк╛ркЬ рк▓ркЧрк╛рк╡рк╡рк╛ ркорк╛ркЯрлЗ рккрк╛ркиркирлА ркЫркмрлА ркЕрккрк▓рлЛркб ркХрк░рлЛ.",
        "upload_prompt": "ркЫркмрлА рккрк╕ркВркж ркХрк░рлЛ...",
        "uploaded_caption": "ркЕрккрк▓рлЛркб ркХрк░рлЗрк▓рлА ркЫркмрлА",
        "prediction_text": "ЁЯМ▒ ркЕркВркжрк╛ркЬ:",
        "language_selector": "ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ",
        "confidence": "рк╡рк┐рк╢рлНрк╡рк╛рк╕",
        "no_model": "ркорлЛркбрлЗрк▓ ркорк│рлНркпрлБркВ ркиркерлА. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккрк╛рке ркдрккрк╛рк╕рлЛ.",
        "play_voice": "ркЖрк╡рк╛ркЬ рк╕рк╛рк░рк╛ркВрк╢ рк╡ркЧрк╛ркбрлЛ",
        "disease_summary": "ркмрлАркорк╛рк░рлА рк╕рк╛рк░рк╛ркВрк╢"
    },
    "Punjabi (рикрй░риЬри╛римрйА)": {
        "title": "ЁЯМ┐ рикрйМрижрйЗ рижрйА римри┐риори╛ри░рйА рижрйА рикри╣ри┐риЪри╛риг",
        "description": "римри┐риори╛ри░рйА рижри╛ риЕриирйБриори╛рии ри▓риЧри╛риЙриг ри▓риИ рикрй▒ридрйЗ рижрйА ридри╕ри╡рйАри░ риЕрикри▓рйЛриб риХри░рйЛред",
        "upload_prompt": "риЗрй▒риХ ридри╕ри╡рйАри░ риЪрйБригрйЛ...",
        "uploaded_caption": "риЕрикри▓рйЛриб риХрйАридрйА ридри╕ри╡рйАри░",
        "prediction_text": "ЁЯМ▒ риЕриирйБриори╛рии:",
        "language_selector": "ринри╛ри╕ри╝ри╛ риЪрйБригрйЛ",
        "confidence": "ринри░рйЛри╕ри╛",
        "no_model": "риори╛рибри▓ риири╣рйАриВ риори┐ри▓ри┐риЖред риХри┐ри░рикри╛ риХри░риХрйЗ риори╛рибри▓ рикри╛рие рижрйА риЬри╛риВриЪ риХри░рйЛред",
        "play_voice": "ри╡рйМриЗри╕ ри╕рй░риЦрйЗрик риЪри▓ри╛риУ",
        "disease_summary": "римри┐риори╛ри░рйА ри╕рй░риЦрйЗрик"
    },
    "Odia (рмУрмбрм╝рм┐рмЖ)": {
        "title": "ЁЯМ┐ рмЙрмжрнНрмнрм┐рмж рм░рнЛрмЧ рмкрм░рм┐рмЪрнЯ",
        "description": "рм░рнЛрмЧ рмкрм░рм┐рмЪрнЯ рмкрм╛рмЗрмБ рмЧрмЫрмкрмдрнНрм░рм░ рмЫрммрм┐ рмЕрмкрм▓рнЛрмбрнН рмХрм░рмирнНрмдрнБред",
        "upload_prompt": "рмПрмХ рмЫрммрм┐ рмЪрнЯрми рмХрм░рмирнНрмдрнБ...",
        "uploaded_caption": "рмЕрмкрм▓рнЛрмбрнН рм╣рнЛрмЗрмерм┐рммрм╛ рмЫрммрм┐",
        "prediction_text": "ЁЯМ▒ рмЕрмирнБрморм╛рми:",
        "language_selector": "рмнрм╛рм╖рм╛ рммрм╛рмЫрмирнНрмдрнБ",
        "confidence": "рмнрм░рм╕рм╛",
        "no_model": "рмормбрнЗрм▓рнН рморм┐рм│рм┐рм▓рм╛ рмирм╛рм╣рм┐рмБред рмжрнЯрм╛рмХрм░рм┐ рмкрме рмпрм╛рмЮрнНрмЪ рмХрм░рмирнНрмдрнБред",
        "play_voice": "рм╢рммрнНрмж рм╕рм╛рм░рм╛рмВрм╢ рмЪрм▓рм╛рмирнНрмдрнБ",
        "disease_summary": "рм░рнЛрмЧ рм╕рм╛рм░рм╛рмВрм╢"
    }
}

def get_disease_summary(disease_name, language):
    try:
        # First try to get summary in selected language
        if language in disease_summaries:
            if disease_name in disease_summaries[language]:
                return disease_summaries[language][disease_name]
        
        # Fallback to English if not available in selected language
        if disease_name in disease_summaries["English"]:
            return disease_summaries["English"][disease_name]
            
        return "Detailed information about this disease is not available at the moment."
    except Exception as e:
        st.warning(f"Error loading disease summary: {e}")
        return "Detailed information about this disease is not available at the moment."

# Function to load model
@st.cache_resource
def load_model(model_path):
    try:
        if os.path.exists(model_path):
            return tf.keras.models.load_model(model_path)
        return None
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None

# Function to preprocess image
def preprocess_image(image, target_size=(128, 128)):
    img = image.resize(target_size)
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    return np.array([img_array])

# Function to generate voice summary
def generate_voice_summary(disease_name, summary_text, language="en"):
    try:
        tts = gtts.gTTS(text=f"{disease_name}. {summary_text}", lang=language, slow=False)
        audio_file = "disease_summary.mp3"
        tts.save(audio_file)
        
        with open(audio_file, "rb") as f:
            audio_bytes = f.read()
        audio_b64 = base64.b64encode(audio_bytes).decode()
        
        if os.path.exists(audio_file):
            os.remove(audio_file)
            
        return audio_b64
    except Exception as e:
        st.error(f"Error generating voice: {e}")
        return None

# Class names
class_name = [
    'Apple___Apple_scab',
    'Apple___Black_rot',
    'Apple___Cedar_apple_rust',
    'Apple___healthy',
    'Blueberry___healthy',
    'Cherry_(including_sour)___Powdery_mildew',
    'Cherry_(including_sour)___healthy',
    'Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot',
    'Corn_(maize)___Common_rust_',
    'Corn_(maize)___Northern_Leaf_Blight',
    'Corn_(maize)___healthy',
    'Grape___Black_rot',
    'Grape___Esca_(Black_Measles)',
    'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)',
    'Grape___healthy',
    'Orange___Haunglongbing_(Citrus_greening)',
    'Peach___Bacterial_spot',
    'Peach___healthy',
    'Pepper,_bell___Bacterial_spot',
    'Pepper,_bell___healthy',
    'Potato___Early_blight',
    'Potato___Late_blight',
    'Potato___healthy',
    'Raspberry___healthy',
    'Soybean___healthy',
    'Squash___Powdery_mildew',
    'Strawberry___Leaf_scorch',
    'Strawberry___healthy',
    'Tomato___Bacterial_spot',
    'Tomato___Early_blight',
    'Tomato___Late_blight',
    'Tomato___Leaf_Mold',
    'Tomato___Septoria_leaf_spot',
    'Tomato___Spider_mites Two-spotted_spider_mite',
    'Tomato___Target_Spot',
    'Tomato___Tomato_Yellow_Leaf_Curl_Virus',
    'Tomato___Tomato_mosaic_virus',
    'Tomato___healthy'
]

# Language code mapping for text-to-speech
language_to_tts_code = {
    "English": "en",
    "Hindi (рд╣рд┐рдиреНрджреА)": "hi",
    "Tamil (родрооро┐ро┤рпН)": "ta",
    "Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)": "te",
    "Kannada (р▓Хр▓ир│Нр▓ир▓б)": "kn",
    "Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)": "ml",
    "Bengali (ржмрж╛ржВрж▓рж╛)": "bn",
    "Marathi (рдорд░рд╛рдареА)": "mr",
    "Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)": "gu",
    "Punjabi (рикрй░риЬри╛римрйА)": "pa",
    "Odia (рмУрмбрм╝рм┐рмЖ)": "or"
}

def main():
    with st.sidebar:
        selected_language = st.selectbox(
            "Select Language",
            options=list(languages.keys())
        )
        
        model_path = st.text_input(
            "Model Path",
            value='C:/Users/shaik/Desktop/CROP/Actual_Project/trained_model0.keras',
            help="/content/trained_model0.keras"
        )
        
        st.markdown("---")
        st.markdown("### About")
        st.info("Plant disease detection using deep learning")

    txt = languages[selected_language]
    st.title(txt["title"])
    st.write(txt["description"])
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        uploaded_file = st.file_uploader(
            txt["upload_prompt"],
            type=["jpg", "png", "jpeg"]
        )
    
    model = load_model(model_path)
    
    if model is None:
        st.error(txt["no_model"])
    
    if uploaded_file and model:
        try:
            image = Image.open(uploaded_file)
            with col1:
                st.image(image, caption=txt["uploaded_caption"])
            
            input_arr = preprocess_image(image)
            prediction = model.predict(input_arr)
            result_index = np.argmax(prediction)
            predicted_disease = class_name[result_index]
            confidence = float(prediction[0][result_index] * 100)
            
            with col2:
                st.markdown("### Results")
                st.success(f"{txt['prediction_text']} {predicted_disease}")
                st.progress(confidence/100)
                st.write(f"{txt['confidence']}: {confidence:.2f}%")
                
                st.markdown(f"### {txt['disease_summary']}")
                summary = get_disease_summary(predicted_disease, selected_language)
                st.write(summary)
                
                st.markdown(f"### {txt['play_voice']}")
                tts_lang = language_to_tts_code.get(selected_language, "en")
                display_name = predicted_disease.replace("___", " ")
                audio_b64 = generate_voice_summary(display_name, summary, tts_lang)
                if audio_b64:
                    st.audio(f"data:audio/mp3;base64,{audio_b64}", format="audio/mp3")
                
                st.markdown("### Top Predictions")
                top_indices = np.argsort(prediction[0])[-3:][::-1]
                for i, idx in enumerate(top_indices):
                    st.write(f"{i+1}. {class_name[idx]} ({prediction[0][idx]*100:.2f}%)")
                # Add optional visualization of model architecture
                if st.checkbox("Show Model Architecture"):
                    # Format model summary as text
                    stringlist = []
                    model.summary(print_fn=lambda x: stringlist.append(x))
                    model_summary = "\n".join(stringlist)
                    st.text(model_summary)
                
        except Exception as e:
            st.error(f"Error: {e}")

if __name__ == "__main__":
    main()